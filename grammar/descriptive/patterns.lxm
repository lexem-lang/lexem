
#------------------------#
#- Lexem grammar v0.1.0 -#
#------------------------#
#- Description:
#-    Patterns of the lexem's descriptive core.
#------------------------#

let {sml, ssl, eoll, ..gen} = import("generics")
let fn_exp = import("functional/expressions")
let {block} = import("./statements")
let {access} = import("./lexemes/accessess")
let {anchor} = import("./lexemes/anchors")
let {binpattern} = import("./lexemes/binary_patterns")
let {block} = import("./lexemes/blocks")
let {executer} = import("./lexemes/executers")
let {group} = import("./lexemes/groups")
let {quantified_group} = import("./lexemes/quantified_groups")
let {text} = import("./lexemes/texts")
let {quantifier} = import("./lexemes/quantifier")

pub! exp pattern {
    |> "|"
    | ">" set_props![:type("static")]
    | "?" set_props![:type("optional")]
    | "!" set_props![:type("negative")]
    | {
        | "+" set_props![:type("negative")]
        | "*" set_props![:type("negative")]
        | quantifier set_props![:type("negative")]
        | set_props![:type("alternative")]

        |? union_name:gen.identifier ">"
    }

    |? content:pattern_content
}

pub! exp pattern_content {
    |> (lexemes:lexem /infix: ssl* ("\\" ssl+)*)+
}

exp lexem {
    |> value:({
        | block
        | text
        | binpattern
        | anchor
        | block
        | group
        | quantified_group
        | executer
        | access
    })
    |? quantifier:quantifier
}