
--------------------------
-- Lexem grammar v0.2.0 --
--------------------------
-- Description:
--    Statements of the functional core.
--------------------------

let (ws, identifier, check_keyword) = import("root:commons")
let fn_exp = import("expressions")
let (function_arguments) = import("root:literals/functions")
let (variable_declaration) = import("statements/variable_declarations")
let (conditional) = import("statements/conditionals")
let (selective) = import("statements/selective")
let loops = import("statements/loops")
let (control) = import("statements/controls")
let (property_style_object_block) = import("root:literals/objects")
let (block as exp_stmt_block) = import("root:descriptive/statements")
let (pattern as exp_pattern) = import("root:descriptive/expressions/patterns")
let (pattern as filter_pattern) = import("root:descriptive/filters/patterns")


------------------------
--  Generic Elements  --
------------------------

pub! exp statement[- capture] {
    | global.lexem.block
    | conditional
    | selective
    | loops.conditional
    | loops.iterator
    | loops.infinite    -- always after the other loops
    | macro_statement_public_options
    | macro_statement
    | control
    | fn_exp.expression
}

pub! exp block {
    |> "{"
    |? "'" tag:identifier

    for *+ do {
		|? ws?
		|> statement
	}

    onBack {
        log.error("Incorrect block. The close bracket '}' is required.")
    }

    |> ws? "}"
}

exp function_statement {
	|> check_keyword("fun") ws? name:identifier
	|? ws? args:function_arguments

	onBack {
		log.error("Incorrect function statement. It is required a body block '{}'.")
	}

    let keep = global.lexem.block
    global.lexem.block = block

	|> body:global.lexem.block

    global.lexem.block = keep
}

exp expression_statement {
	|> check_keyword("exp") ws? name:identifier
	|? ws? props:property_style_object_block
	|? ws? args:function_arguments

	onBack {
		log.error("Incorrect expression statement. It is required a body block '{}'.")
	}

    let keep = global.lexem.block
    let keep_pattern = global.lexem.pattern
    global.lexem.block = exp_stmt_block
    global.lexem.pattern = exp_pattern

	|> body:global.lexem.block

    global.lexem.block = keep
    global.lexem.pattern = keep_pattern
}

exp filter_statement {
	|> check_keyword("filter") ws? name:identifier
	|? ws? props:property_style_object_block
	|? ws? args:function_arguments

	onBack {
		log.error("Incorrect filter statement. It is required a body block '{}'.")
	}

    let keep = global.lexem.block
    let keep_pattern = global.lexem.pattern
    global.lexem.block = exp_stmt_block
    global.lexem.pattern = filter_pattern

	|> body:global.lexem.block

    global.lexem.block = keep
    global.lexem.pattern = keep_pattern
}



------------------------
--  Macro statements  --
------------------------

exp macro_statement[- capture] {
    | macro_statement_public
    | set_props_macro
}

exp macro_statement_public[- capture] {
    |> "pub!" ws?
        
    set_props![capture]
    
    onBack {
        log.error("Incorrect pub! macro statement. It is required a variable declaration, a function, an expression or a filter statement.")
    }

    |> macro_statement_public_options
}

exp macro_statement_public_options[- capture] {
    | variable_declaration
    | function_statement
    | expression_statement
    | filter_statement
}

pub! exp set_props_macro {
    |> "set_props!"

    onBack {
        log.error("'set_props!' macro requires a block started with '['.")
    }

    |> block:property_style_object_block
}