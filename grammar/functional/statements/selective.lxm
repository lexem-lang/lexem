
--------------------------
-- Lexem grammar v0.1.1 --
--------------------------
-- Description:
--    Selective statements of the functional core.
--------------------------

let (ws, check_keyword, identifier) = import("root:commons")
let fn_exp = import("./expressions")
let fn_stmt = import("../statements")
let (destructuring) = import("variable_declarations")

pub! exp selective {
    |> check_keyword("when")

    -- Parenthesis because object definition collide with the block of the selective statement.
    |? ws? condition:fn_exp.parenthesis_expression

    onBack {
        log.error("The selective statement requires here the open bracket '{'.")
    }

    |> ws? "{"
    |? "'" tag:identifier

    onBack {
        log.error("The selective statement requires at least one case.")
    }

    for ++ {
        |> ws? case
    }

    onBack {
        log.error("The selective statement requires here the close bracket '}'.")
    }

    |> ws? "}"
}

exp case {
    repeat i for ++ {
        if i > 0 {
            |> ws? "," ws?

            onBack {
                log.error("The selective case requires a pattern after the ','.")
            }
        }

        | pattern_conditional
        | pattern_else
        | pattern_variable
        | pattern_expression
    }

    onBack {
        log.error("The selective case requires a block statement ({}) for its body.")
    }

    |> ws? code:global.lexem.block
}

exp pattern_variable {
    | check_keyword("var") set_props![- isConst]
    | check_keyword("let") set_props![isConst]

    onBack {
        log.error("An identifier or destructuring is required for the var declaration pattern.")
    }

    | ws? name:destructuring
    | ws? name:identifier_dynamic

    |? ws? conditional:pattern_conditional
}

exp pattern_expression {
    |> expression:fn_exp.expression
    |? ws? conditional:pattern_conditional
}

exp pattern_conditional {
    | check_keyword("if") set_props![if]
    | check_keyword("unless") set_props![- if]

    onBack {
        log.error("The conditional pattern requires an expression for its condition.")
    }

    |> ws? condition:fn_exp.expression
}

exp pattern_else {
    |> check_keyword("else")
}
