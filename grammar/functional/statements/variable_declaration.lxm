
--------------------------
-- Lexem grammar v0.1.1 --
--------------------------
-- Description:
--    Variable declaration statements.
--------------------------

let (ws, identifier, identifier_dynamic) = import("root:commons")
let fn_exp = import("../expressions")

pub! exp variable_declaration {
    | check_keyword("var") set_props![- isConst]
    | check_keyword("let") set_props![isConst]

    let key = if is_constant {"let"} else {"var"}

    onBack {
        log.error("An identifier or destructuring are required after the \(key) token.")
    }

    |? ws

    | destructuring
    | identifier_dynamic

    onBack {
        log.error("The \(key) declaration statement requires an initial value.")
    }

    |> ws? "="

    onBack {
        log.error("An expression is required after the '=' symbol.")
    }

    |> ws? fn_exp.expression
}

pub! exp destructuring {
    |? alias:identifier {
        |> ws? "," ws?
    }
    |> "(" ws?

    var prev = false

	repeat i for *+ {
	    if i > 0 {
            |> ws? "," ws?
	    }

	    |> destructuring_element

		prev = true
	}

    -- Spread element
	|? {
		if(prev) {
			|> ws? "," ws?
		}

		|> destructuring_spread_element
	}

    -- trailing comma
    |? ws? ","

    onBack {
        log.error("Incorrect destructuring. The close parenthesis ')' is required.")
    }

    |> ws? ")"
}

exp destructuring_element {
    set_props![- constant]
    |? original:identifier ws? "as" ws? {
        onBack {
            log.error("An identifier is required after the rename symbol ('as').")
        }
    }

    |? "#" set_props![constant]
    |> alias:identifier
}

exp destructuring_spread_element {
    |> ".."

    onBack {
        log.error("Incorrect destructuring. An identifier was expected after the spread operator (..)")
    }

    set_props![- constant]
    |? "#" set_props![constant]
    |> identifier
}