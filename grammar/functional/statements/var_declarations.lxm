
#------------------------#
#- Lexem grammar v0.1.0 -#
#------------------------#
#- Description:
#-    Variable declaration statements of the lexem's functional core.
#------------------------#

let {sml, eoll, ..gen} = import("generics")
let fn_exp = import("./expressions")

pub! exp var_declaration(props![- backtrack]) {
    | gen.keyword("var") set_props![- isConst]
    | gen.keyword("let") set_props![isConst]

    onback {
        log.error("An identifier or destructuring are required after the \(if is_constant {"let"} else {"var"})' token.")
    }
    | sml* name: gen.identifier
    | sml* destructuring: destructuring

    onback {
        log.error("The \(if is_constant {"let"} else {"var"})' declaration statement requires an initial value.")
    }
    |> sml* "="

    onback {
        log.error("An expression is required after the '=' symbol.")
    }
    |> sml* fn_exp.expression
    
    onback {
        log.error("The \(if is_constant {"let"} else {"var"})' declaration statement should end here.")
    }
    |> eoll
}

pub! exp destructuring(props![- backtrack]) {
    |> "("

    onback {
        log.error("Incorrect destructuring. The close parenthesis ')' is required.")
    }
    for ++ {
        |> key:(element[capture]: {
            set_props![- constant]
            |> sml* ("#" set_props![constant])? key:gen.identifier
            |? sml* "as" {
                onback {
                    log.error("An expression is required after the '=' symbol.")
                }
                |> sml* as:gen.identifier
            }
        })
    }
    infix {
        |> sml* ","
    }

    #- Spread element
    set_props![- spread_constant]
    |? sml* "," sml* ".." ("#" set_props![spread_constant])? spread_value:gen.identifier
    
    |? sml* "," #- trailing comma
    
    onback {
        log.error("Incorrect destructuring. The close parenthesis ')' is required.")
    }
    |> sml* ")"
}