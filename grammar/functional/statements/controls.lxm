
#------------------------#
#- Lexem grammar v0.1.1 -#
#------------------------#
#- Description:
#-    Control statements of the functional core.
#------------------------#

let (ws, check_keyword, identifier) = import("../../commons")
let fn_exp = import("../expressions")


pub! exp control(props![- capture]) {
    | exit:control_with_expression("exit")
    | next:control_without_expression("next")
    | redo:control_without_expression("redo")
    | restart:control_without_expression("restart")
    | return:return_stmt

    onBack {
        log.error("The control statement should end here.")
    }
}

exp control_with_expression(token) {
    |> check_keyword(token)
    |? "'" tag:identifier

    onBack {
        log.error("An expression is required for the '\(token)' control statement.")
    }
    
    |> ws? expression:fn_exp.expression
}

exp control_without_expression(token) {
    |> check_keyword(token)
    |? "'" tag:identifier
}

exp return_stmt {
    |> check_keyword("return")

    onBack {
        log.error("An expression is required for the return control statement.")
    }

    |> ws? expression:fn_exp.expression
}