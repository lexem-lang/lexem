
#------------------------#
#- Lexem grammar v0.1.0 -#
#------------------------#
#- Description:
#-    Loop statements of the lexem's functional core.
#------------------------#

let {sml, ..gen} = import("generics")
let fn_exp = import("./expressions")
let fn_stmt = import("../statements")
let {destructuring as var_destructuring} = import("./var_declarations")

let infix_keyword = "infix"
let end_keyword = "end"
let else_keyword = "else"

pub! exp infinite {
    |> gen.keyword("repeat")
    |? sml* name:gen.identifier

    onback {
        log.error("The infinite loop statement requires a block statement ({}) for its 'then' block.")
    }
    |> sml* then:fn_stmt.block

    |? infix:last_clause(infix_keyword)
    |? end:last_clause(end_keyword)
    |? else:last_clause(else_keyword)
}

pub! exp conditional {
    |? gen.keyword("repeat") sml* repeater:gen.identifier sml*
    | gen.keyword("while") set_props![while]
    | gen.keyword("until") set_props![- while]

    onback {
        log.error("The conditional loop statement requires an expression for its condition.")
    }
    |> sml* condition:fn_exp.expression

    onback {
        log.error("The conditional loop statement requires a block statement ({}) for its 'then' block.")
    }
    |> sml* then:fn_stmt.block

    |? infix:last_clause(infix_keyword)
    |? end:last_clause(end_keyword)
    |? else:last_clause(else_keyword)
}

pub! exp iterator {
    |? gen.keyword("repeat") sml* repeater:gen.identifier sml*
    |> gen.keyword("for")

    onback {
        log.error("The iterator loop statement requires at least a variable name for the current value of the iteration.")
    }
    |> sml* first:gen.identifier {
        |> sml* "," sml*

        onback {
            log.error("The iterator loop statement requires another name or a destructuring after the comma.")
        }
        | second:gen.identifier
        | second:var_destructuring
    }

    onback {
        log.error("The iterator loop statement requires the 'in' symbol after the variable names.")
    }
    |> sml* gen.keyword("in")

    onback {
        log.error("The iterator loop statement requires an expression to get the iterator.")
    }
    |> sml* condition:fn_exp.expression

    onback {
        log.error("The iterator loop statement requires a block statement ({}) for its body.")
    }
    |> sml* then:fn_stmt.block

    |? infix:last_clause(infix_keyword)
    |? end:last_clause(end_keyword)
    |? else:last_clause(else_keyword)
}



#------------#
#-  Others  -#
#------------#

exp last_clause(keyword) {
    |> gen.keyword(keyword)

    onback {
        log.error("The \(keyword) clause of the loop statement requires a block statement ({}) for its body.")
    }
    |> sml* body:fn_stmt.block
}