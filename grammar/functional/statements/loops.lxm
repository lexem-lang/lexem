
#------------------------#
#- Lexem grammar v0.1.1 -#
#------------------------#
#- Description:
#-    Loop statements of the functional core.
#------------------------#

let (ws, ws_simple, check_keyword, identifier) = import("../../commons")
let fn_exp = import("../expressions")
let fn_stmt = import("../statements")
let (destructuring) = import("variable_declarations")

let end_keyword = "end"
let else_keyword = "else"

pub! exp infinite {
    |> check_keyword("repeat")
    |? ws? index:identifier

    onback {
        log.error("The infinite loop statement requires a block statement ({}) for its 'then' block.")
    }

    |> ws? then:fn_stmt.block

    |? end:last_clause(end_keyword)
    |? else:last_clause(else_keyword)
}

pub! exp conditional {
    |? check_keyword("repeat") ws? index:identifier ws?
    | check_keyword("while") set_props![while]
    | check_keyword("until") set_props![- while]

    onback {
        log.error("The conditional loop statement requires an expression for its condition.")
    }

    |> ws? condition:fn_exp.expression

    onback {
        log.error("The conditional loop statement requires a block statement ({}) for its 'then' block.")
    }

    |> ws? then:fn_stmt.block

    |? end:last_clause(end_keyword)
    |? else:last_clause(else_keyword)
}

pub! exp iterator {
    |? check_keyword("repeat") ws? index:identifier ws?
    |> check_keyword("for")

    onback {
        log.error("The iterator loop statement requires at least a variable name for the current value of the iteration.")
    }

    |> ws? first:identifier {
        |> ws? "," ws?

        onback {
            log.error("The iterator loop statement requires another name or a destructuring after the comma.")
        }
        | second:identifier
        | destructuring
    }

    onback {
        log.error("The iterator loop statement requires the 'in' symbol after the variable names.")
    }

    |> ws? check_keyword("in")

    onback {
        log.error("The iterator loop statement requires an expression to get the iterator.")
    }

    |> ws? condition:fn_exp.expression

    onback {
        log.error("The iterator loop statement requires a block statement ({}) for its body.")
    }

    |> ws? then:fn_stmt.block

    |? end:last_clause(end_keyword)
    |? else:last_clause(else_keyword)
}



#------------#
#-  Others  -#
#------------#

exp last_clause(keyword) {
    |> check_keyword(keyword)

    onback {
        log.error("The \(keyword) clause of the loop statement requires a block statement ({}) for its body.")
    }

    |> ws? body:fn_stmt.block
}