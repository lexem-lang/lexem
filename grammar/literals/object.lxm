
--------------------------
-- Lexem grammar v0.2.0 --
--------------------------
-- Description:
--    Object literals.
--------------------------

let (ws, identifier_dynamic) = import("root:commons")
let fn_exp = import("root:functional/expressions")
let (function_parameters) = import("function")

pub! exp object[- capture] {
	| normal_object
	| property_style_object
}

exp normal_object {
	set_props![- isConstant]
	|? "#" set_props![isConstant]
	|> "{" ws?

	repeat i for *+ {
        if i > 0 {
            |> ws? "," ws?
        }

        | object_simplification
        | object_element
    }

	onBack {
		log.error("Incorrect object literal. The close bracket '}' is required.")
	}

	|> ws? ("," ws?)? "}"	-- trailing comma
}

exp object_element {
	set_props![- isConstant]
	|? "#" set_props![isConstant] {
		onBack {
			log.error("Incorrect object property. After the static modifier '#' it is required a key-value pair.")
		}
	}
	|> identifier_dynamic

	onBack {
		log.error("Incorrect object property. After the keyword it is required the relation symbol ':'.")
	}

	|> ws? ":"

	onBack {
		log.error("Incorrect object property. After the relation symbol ':' it is require the value of the property.")
	}

	|> ws? fn_exp.expression
}

exp object_simplification {
	set_props![- isConstant]
	|? "#" set_props![isConstant]
	|> identifier_dynamic
	| {
		|> args:function_parameters
		
		onBack {
			log.error("Incorrect object property. The inline function definition requires a body block '{}'.")
		}
		
		|> body:global.lexem.block
	}
	| ([- children consume]: ws? "," | ws? "}")
}

pub! exp property_style_object {
	|> "@" set_props![- isConstant]
	|? "#" set_props![isConstant]

	onBack {
		log.error("Incorrect property-style literal. The open square bracket '[' is required.")
	}

	|> property_style_object_block
}

pub! exp property_style_object_block {
	|> "["
	|? (ws? activated:identifier_dynamic)*
	|? ws? "-" (ws? deactivated:identifier_dynamic)*
	|? ws? ":" (ws? set:property_style_object_element)*

	onBack {
		log.error("Incorrect property-style object literal. The close square bracket ']' is required.")
	}

	|> ws? ]"
}

exp property_style_object_element {
	|> name:identifier_dynamic

	onBack {
		log.error("Incorrect property-style object property. The open parenthesis '(' is required.")
	}
	|> fn_exp.parenthesis_expression
}