
--------------------------
-- Lexem grammar v0.2.0 --
--------------------------
-- Description:
--    Interval literals.
--------------------------

let commons(ws_simple, escape, escaped_expression) = import("root:commons")
let (integer_decimal_number) = import("number")

pub! exp interval[- capture] {
	| normal_interval
	| unicode_interval
}

exp normal_interval {
	|> "itv!"

	onBack {
		log.error("Incorrect interval literal. The open square bracket '[' is required.")
	}

	|> "[" set_props![- reversed]
	|? "!" set_props![reversed]

    for * {
        |? ws_simple
        | normal_interval_sub_interval
        | normal_interval_element
    }

	onBack {
		log.error("Incorrect interval literal. The close square bracket ']' is required.")
	}

	|> ws_simple? "]"
}

exp normal_interval_element {
	| left:commons.escaped_expression
	| left:integer_number_dec_default
	|? ".." {
		onBack {
			log.error("Incorrect interval literal. Another character is required after the range symbol '..'.")
		}

        | right:commons.escaped_expression
        | right:integer_number_dec_default
	}
}

exp normal_interval_sub_interval {
	|> "[" set_props![- reversed : operator("+")]
	|? (operator[property]: [+-&^]) ("!" set_props![reversed])?

	for * {
        |? ws_simple
        | normal_interval_sub_interval
        | normal_interval_element
    }

	onBack {
		log.error("Incorrect sub-interval literal. The close square bracket ']' is required.")
	}

	|> ws_simple? "]"
}


exp unicode_interval {
	|> "uitv!"

	onBack {
		log.error("Incorrect interval literal. The open square bracket '[' is required.")
	}

	|> unicode_interval_abbr
}

pub! exp unicode_interval_abbr {
    |> "[" set_props![- reversed]
    |? "!" set_props![reversed]

    for * {
        |? ws_simple
        | unicode_interval_sub_interval
        | unicode_interval_element
    }

    onBack {
        log.error("Incorrect interval literal. The close square bracket ']' is required.")
    }

    |> ws_simple? "]"
}

exp unicode_interval_element {
	| left:commons.escape
	| (left[capture]: [! \{commons.whitespace_block} \{commons.line_break_block}])
	|? ".." {
		onBack {
			log.error("Incorrect interval literal. Another character is required after the range symbol '..'.")
		}

        | right:commons.escape
	    | (right[capture]: [! \{commons.whitespace_block} \{commons.line_break_block}])
	}
}

exp unicode_interval_sub_interval {
	|> "[" set_props![- reversed : operator("+")]
	|? (operator[property]: [+-&^]) ("!" set_props![reversed])?

	for * {
        |? ws_simple
        | unicode_interval_sub_interval
        | unicode_interval_element
    }

	onBack {
		log.error("Incorrect sub-interval literal. The close square bracket ']' is required.")
	}

	|> ws_simple? "]"
}