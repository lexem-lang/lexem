
#------------------------#
#- Lexem grammar v0.1.1 -#
#------------------------#
#- Description:
#-    Object literals.
#------------------------#

let (ws) = import("../commons")
let fn_exp = import("../functional/expressions")
let fn_stmt = import("../functional/statements")
let (function_arguments) = import("function")

pub! exp object[- capture] {
	| normal_object
	| property_style_object
}

exp normal_object {
	set_props![- isConstant]
	|? "#" set_props![isConstant]
	|> "{" ws?

	repeat i for *+ {
        if i > 0 {
            |> ws? "," ws?
        }

        | object_simplification
        | object_element
    }

	onback {
		log.error("Incorrect object literal. The close bracket '}' is required.")
	}

	|> ws? ("," ws?)? "}"	#- trailing comma
}

exp object_element {
	set_props![- isConstant]
	|? "#" set_props![isConstant] {
		onback {
			log.error("Incorrect object property. After the static modifier '#' it is required a key-value pair.")
		}
	}
	| identifier
	| string
	| escaped_expression

	onback {
		log.error("Incorrect object property. After the keyword it is required the relation symbol ':'.")
	}

	|> ws? ":"

	onback {
		log.error("Incorrect object property. After the relation symbol ':' it is require the value of the property.")
	}

	|> ws? fn_exp.expression
}

exp object_simplification {
	set_props![- isConstant]
	|? "#" set_props![isConstant]
	|> identifier
	| {
		|> args:function_arguments {
			onback {
				log.error("Incorrect object property. The inline function definition requires a body block '{}'.")
			}
		}
		|> body:fn_stmt.block
	}
	| ([- children consume]: ws? "," | ws? "}")
}

pub! exp property_style_object {
	|> "@" set_props![- isConstant]
	|? "#" set_props![isConstant]

	onback {
		log.error("Incorrect property-style literal. The open square bracket '[' is required.")
	}

	|> property_style_object_block
}

pub! exp property_style_object_block {
	|> "["
	|? (ws? activated:identifier)*
	|? ws? "-" (ws? deactivated:identifier)*
	|? ws? ":" (ws? set:property_style_object_element)*

	onback {
		log.error("Incorrect property-style object literal. The close square bracket ']' is required.")
	}

	|> ws? ]"
}

exp property_style_object_element {
	|> name:identifier

	onback {
		log.error("Incorrect property-style object property. The open parenthesis '(' is required.")
	}
	|> "("

	onback {
		log.error("Incorrect property-style object property. An expression is required after the open parenthesis '('.")
	}
	|> ws? fn_exp.expression

	onback {
		log.error("Incorrect property-style object property. The close parenthesis ')' is required.")
	}
	|> ws? ")"
}