
#------------------------#
#- Lexem grammar v0.1.0 -#
#------------------------#
#- Description:
#-    The lexem's object literals.
#------------------------#

let {s, sml} = import("generics")
let fn_exp = import("functional/expressions")
let fn_stmt = import("functional/statement")
let {function_arguments} = import("./functions")

pub! exp object(props![- capture backtrack]) {
	| normal_object
	| property_style_object
}

exp normal_object {
	set_props![- isConstant]
	| "#{" set_props![isConstant] {
		onback {
			log.error("Incorrect object literal. The open bracket '{' is required.")
		}
	}
	| "{" sml*
	|? (elements:object_simplification | elements:object_element /infix: sml* "," sml*)+
    
	onback {
		log.error("Incorrect object literal. The close bracket '}' is required.")
	}
	|> sml* ("," sml*)? "}"	#- trailing comma
}

exp object_element {
	set_props![- isConstant]
	|? "#" set_props![isConstant] {
		onback {
			log.error("Incorrect object property. After the static modifier '#' it is required a key-value pair.")
		}
	}
	|> key:(identifier | string | escaped_expression)

	onback {
		log.error("Incorrect object property. After the keyword it is required the relation symbol ':'.")
	}
	|> sml* ":"

	onback {
		log.error("Incorrect object property. After the relation symbol ':' it is require the value of the property.")
	}
	|> sml* value:fn_exp.expression
}

exp object_simplification {
	|> key:identifier
	| {
		if |> args:function_arguments {
			onback {
				log.error("Incorrect object property. The inline function definition requires a body block '{}'.")
			}
		}
		|> body:fn_stmt.block
	}
	| ([fixed - children]: sml* "," | sml* "}")
}

pub! exp property_style_object {
	|> "props!"

	onback {
		log.error("Incorrect object literal. The open square bracket '[' is required.")
	}
	|> block:property_style_object_block
}

pub! exp property_style_object_block {
	set_props![- isConstant]
	|? "#" set_props![isConstant]
	|> "["
	|? (sml* active:identifier)*
	|? sml* "-" (sml* deactive:identifier)*
	|? sml* ":" (sml* set:property_style_object_element)*

	onback {
		log.error("Incorrect object literal. The close square bracket ']' is required.")
	}
	|> sml* ("," sml*)? "]"	#- trailing comma
}

exp property_style_object_element {
	|> name:identifier

	onback {
		log.error("Incorrect object property. The open parenthesis '(' is required.")
	}
	|> "("

	onback {
		log.error("Incorrect object property. An expression is required after the open parenthesis '('.")
	}
	|> sml* fn_exp.expression

	onback {
		log.error("Incorrect object property. The close parenthesis ')' is required.")
	}
	|> sml* ")"
}