
--------------------------
-- Lexem grammar v0.2.0 --
--------------------------
-- Description:
--    Function literals.
--------------------------

let (ws) = import("root:commons")
let fn_exp = import("root:functional/expressions")
let fn_stmt = import("root:functional/statement")

pub! exp function {
	|> "fun" ws?
	|? args:function_arguments ws?

	onBack {
		log.error("Incorrect literal function. It is required a body block '{}'.")
	}

    let keep = global.lexem.block
    global.lexem.block = fn_stmt.block

	|> body:global.lexem.block

    global.lexem.block = keep
}

pub! exp function_arguments {
	|> "(" ws?

	var prev = false

	repeat i for *+ {
	    if i > 0 {
            |> ws? "," ws?
	    }

	    |> function_arguments_element

		prev = true
	}

    -- Spread element
	|? {
		if(prev) {
			|> ws? "," ws?
		}
		|> ".."
		
		onBack {
			log.error("Incorrect arguments. An identifier was expected after the spread operator '..'.")
		}

		|> spread:identifier
	}

	onBack {
		log.error("Incorrect arguments. The close parenthesis ')' is required.")
	}

	|> ws? ("," ws?)? ")"	-- trailing comma
}

exp function_arguments_element {
	|> key:identifier
	|? ws? "=" {
		onBack {
			log.error("Incorrect argument. After the assign operator '=' it is require the default value of the argument.")
		}

		|> ws? value:fn_exp.expression
	}
}